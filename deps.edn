{:paths ["src/clj" "src/cljs" "test" "resources" "target/classes"],
 :deps {
        ;; clojure core environment and runtime library
        org.clojure/clojure {:mvn/version "1.12.1"},
        ;; tools for managing namespaces in clojure
        org.clojure/tools.namespace {:mvn/version "1.5.0"},
        ;; a clojure trace tool for debugging
        org.clojure/tools.trace {:mvn/version "0.8.0"},
        ;; logs events and data
        com.brunobonacci/mulog {:mvn/version "0.9.0"}
        ;; pedestal is a set of libraries that we use to build services and
        ;; applications. It runs in the back end and can serve up whole HTML
        ;; pages or handle API requests
        io.pedestal/pedestal.service {:mvn/version "0.7.2"}
        io.pedestal/pedestal.route   {:mvn/version "0.7.2"}
        io.pedestal/pedestal.jetty   {:mvn/version "0.7.2"}
        ;; generating/parsing json from/to clojure data structures
        org.clojure/data.json {:mvn/version "2.5.1"}
        ;; front-end
        org.clojure/clojurescript {:mvn/version "1.12.42"},
        cljsjs/react {:mvn/version "18.3.1-1"},
        cljsjs/react-dom {:mvn/version "18.3.1-1"},
        reagent/reagent {:mvn/version "1.3.0"},
        re-frame/re-frame {:mvn/version "1.4.3"},
        day8.re-frame/http-fx {:mvn/version "0.2.4"},
        day8.re-frame/tracing {:mvn/version "0.6.2"}}
 :aliases {
           ;; development environment
           :env/dev {:extra-paths ["dev" "test"]
                     :main-opts ["-m" "calc.main"]
                     :jvm-opts ["-Dconfig=resources/dev/config.edn"]},

           ;; development environment docker
           :env/dev-docker {:extra-paths ["dev" "test"]
                            :main-opts ["-m" "calc.main"]
                            :jvm-opts ["-Dconfig=resources/dev/config-docker.edn"]},

           ;; production environment
           :env/prod {:main-opts ["-m" "calc.main"]
                      :jvm-opts ["-Dconfig=resources/prod/config.edn"]}

           ;; testing environment
           :env/test {:extra-paths ["dev" "test"],
                      :jvm-opts ["-Dconfig=resources/test/config.edn"]}

           ;; clojurescript build
           :cljsbuild {:main-opts ["-m" "cljs.main"
                                   "-co" "edn/build.edn"
                                   "-c" "calc_ui.core"]}
           ;; clojurescript, repl
           :cljsrepl {:main-opts ["-m" "cljs.main"
                                  "-ro" "edn/repl.edn"
                                  "-r"]}

           :run/test {:extra-deps
                      {io.github.cognitect-labs/test-runner {:git/tag "v0.5.1"
                                                             :git/sha "dfb30dd"}}
                      :main-opts ["-m" "cognitect.test-runner"]
                      :jvm-opts ["-Dconfig=resources/dev/config.edn"]
                      :exec-fn cognitect.test-runner.api/test
                      ;; override the default:
                      ;; setting https://github.com/cognitect-labs/test-runner/issues/20
                      :exec-args {:patterns [".*test$"]}},

           ;; native repl server
           :run/repl-server {:jvm-opts ["-Dconfig=resources/dev/config.edn"]
                             :exec-fn clojure.core.server/start-server,
                             :exec-args
                             {:name "repl-server",
                              :address "0.0.0.0",
                              :port 55555,
                              :accept clojure.core.server/repl,
                              :bind-err true,
                              :server-daemon false,
                              :client-daemon false}},

           ;; native repl server using socket
           :run/repl-socket
           {:jvm-opts
            ["-Dclojure.server.repl={:port,50505,:accept,clojure.core.server/repl}"]},

           ;; check for vulnerability
           :run/nvd {:extra-deps {nvd-clojure/nvd-clojure {:mvn/version "5.0.0"}}
                     :main-opts ["-m" "nvd.task.check"]}
           ;; generate dependency graph
           :run/deps-graph {:replace-deps {org.clojure/tools.deps.graph {:mvn/version "1.1.90"}}
                            :main-opts ["-m" "clojure.tools.deps.graph"] ; deprecated
                            :ns-default clojure.tools.deps.graph}
           }
 ;; remote repositories
 :mvn/repos {"central" {:url "https://repo1.maven.org/maven2/"}
             "clojars" {:url "https://repo.clojars.org/"}}; end of provider
 }
